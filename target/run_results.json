{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/run-results/v6.json", "dbt_version": "1.10.13", "generated_at": "2025-10-28T15:01:58.452347Z", "invocation_id": "18e59b04-f87b-4e14-b75d-466b5ddea9ad", "invocation_started_at": "2025-10-28T15:01:41.532972Z", "env": {}}, "results": [{"status": "success", "timing": [{"name": "compile", "started_at": "2025-10-28T15:01:47.731965Z", "completed_at": "2025-10-28T15:01:47.746160Z"}, {"name": "execute", "started_at": "2025-10-28T15:01:47.746376Z", "completed_at": "2025-10-28T15:01:47.746385Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.014952898025512695, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.github.stg_github__issue_tmp", "compiled": true, "compiled_code": "select *\nfrom FIVETRAN_DATABASE.GITHUB.issue", "relation_name": "FIVETRAN_DATABASE.GITHUB_github_source.stg_github__issue_tmp", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-10-28T15:01:47.739758Z", "completed_at": "2025-10-28T15:01:47.748218Z"}, {"name": "execute", "started_at": "2025-10-28T15:01:47.748424Z", "completed_at": "2025-10-28T15:01:47.748428Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.009174823760986328, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.github.stg_github__issue_merged_tmp", "compiled": true, "compiled_code": "select *\nfrom FIVETRAN_DATABASE.GITHUB.issue_merged", "relation_name": "FIVETRAN_DATABASE.GITHUB_github_source.stg_github__issue_merged_tmp", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-10-28T15:01:48.325723Z", "completed_at": "2025-10-28T15:01:48.327800Z"}, {"name": "execute", "started_at": "2025-10-28T15:01:48.327970Z", "completed_at": "2025-10-28T15:01:48.327974Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.6011810302734375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.github.stg_github__issue_closed_history_tmp", "compiled": true, "compiled_code": "select *\nfrom FIVETRAN_DATABASE.GITHUB.issue_closed_history", "relation_name": "FIVETRAN_DATABASE.GITHUB_github_source.stg_github__issue_closed_history_tmp", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-10-28T15:01:48.679218Z", "completed_at": "2025-10-28T15:01:48.713672Z"}, {"name": "execute", "started_at": "2025-10-28T15:01:48.714375Z", "completed_at": "2025-10-28T15:01:48.714386Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.9654459953308105, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.github.stg_github__pull_request_review_tmp", "compiled": true, "compiled_code": "select *\nfrom FIVETRAN_DATABASE.GITHUB.pull_request_review", "relation_name": "FIVETRAN_DATABASE.GITHUB_github_source.stg_github__pull_request_review_tmp", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-10-28T15:01:48.720971Z", "completed_at": "2025-10-28T15:01:48.731960Z"}, {"name": "execute", "started_at": "2025-10-28T15:01:48.732256Z", "completed_at": "2025-10-28T15:01:48.732261Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.9794330596923828, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.github.stg_github__pull_request_tmp", "compiled": true, "compiled_code": "select *\nfrom FIVETRAN_DATABASE.GITHUB.pull_request", "relation_name": "FIVETRAN_DATABASE.GITHUB_github_source.stg_github__pull_request_tmp", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-10-28T15:01:48.726127Z", "completed_at": "2025-10-28T15:01:48.735090Z"}, {"name": "execute", "started_at": "2025-10-28T15:01:48.735300Z", "completed_at": "2025-10-28T15:01:48.735303Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.0046887397766113, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.github.stg_github__issue_comment_tmp", "compiled": true, "compiled_code": "select *\nfrom FIVETRAN_DATABASE.GITHUB.issue_comment", "relation_name": "FIVETRAN_DATABASE.GITHUB_github_source.stg_github__issue_comment_tmp", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-10-28T15:01:48.763785Z", "completed_at": "2025-10-28T15:01:48.778206Z"}, {"name": "execute", "started_at": "2025-10-28T15:01:48.778493Z", "completed_at": "2025-10-28T15:01:48.778498Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.4492192268371582, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.github.stg_github__repository_tmp", "compiled": true, "compiled_code": "select *\nfrom FIVETRAN_DATABASE.GITHUB.repository", "relation_name": "FIVETRAN_DATABASE.GITHUB_github_source.stg_github__repository_tmp", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-10-28T15:01:49.624959Z", "completed_at": "2025-10-28T15:01:49.678328Z"}, {"name": "execute", "started_at": "2025-10-28T15:01:49.678660Z", "completed_at": "2025-10-28T15:01:49.678666Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.9598648548126221, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.github.stg_github__user_tmp", "compiled": true, "compiled_code": "select *\nfrom FIVETRAN_DATABASE.GITHUB.user", "relation_name": "FIVETRAN_DATABASE.GITHUB_github_source.stg_github__user_tmp", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-10-28T15:01:49.615468Z", "completed_at": "2025-10-28T15:01:49.766527Z"}, {"name": "execute", "started_at": "2025-10-28T15:01:49.766709Z", "completed_at": "2025-10-28T15:01:49.766715Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.021817922592163, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.github.stg_github__issue_merged", "compiled": true, "compiled_code": "with issue_merged as (\n\n    select *\n    from FIVETRAN_DATABASE.GITHUB_github_source.stg_github__issue_merged_tmp\n\n), macro as (\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_github/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_github/macros/).\n\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    actor_id\n    \n as \n    \n    actor_id\n    \n, \n    \n    \n    commit_sha\n    \n as \n    \n    commit_sha\n    \n, \n    \n    \n    issue_id\n    \n as \n    \n    issue_id\n    \n, \n    \n    \n    merged_at\n    \n as \n    \n    merged_at\n    \n\n\n\n\n    from issue_merged\n\n), fields as (\n\n    select \n      issue_id,\n      cast(merged_at as timestamp) as merged_at\n\n    from macro\n)\n\nselect *\nfrom fields", "relation_name": "FIVETRAN_DATABASE.GITHUB_github_source.stg_github__issue_merged", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-10-28T15:01:49.608730Z", "completed_at": "2025-10-28T15:01:49.814175Z"}, {"name": "execute", "started_at": "2025-10-28T15:01:49.814364Z", "completed_at": "2025-10-28T15:01:49.814368Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.032459020614624, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.github.stg_github__issue_closed_history", "compiled": true, "compiled_code": "with issue_closed_history as (\n\n    select *\n    from FIVETRAN_DATABASE.GITHUB_github_source.stg_github__issue_closed_history_tmp\n\n), macro as (\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_github/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_github/macros/).\n\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    actor_id\n    \n as \n    \n    actor_id\n    \n, \n    \n    \n    closed\n    \n as \n    \n    closed\n    \n, \n    \n    \n    commit_sha\n    \n as \n    \n    commit_sha\n    \n, \n    \n    \n    issue_id\n    \n as \n    \n    issue_id\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n\n\n\n\n    from issue_closed_history\n\n), fields as (\n\n    select \n      issue_id,\n      cast(updated_at as timestamp) as updated_at,\n      closed as is_closed\n\n    from macro\n)\n\nselect *\nfrom fields", "relation_name": "FIVETRAN_DATABASE.GITHUB_github_source.stg_github__issue_closed_history", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-10-28T15:01:50.495148Z", "completed_at": "2025-10-28T15:01:50.903663Z"}, {"name": "execute", "started_at": "2025-10-28T15:01:50.903860Z", "completed_at": "2025-10-28T15:01:50.903866Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.0872986316680908, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.github.stg_github__issue_comment", "compiled": true, "compiled_code": "with issue_comment as (\n\n    select *\n    from FIVETRAN_DATABASE.GITHUB_github_source.stg_github__issue_comment_tmp\n\n), macro as (\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_github/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_github/macros/).\n\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    body\n    \n as \n    \n    body\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    issue_id\n    \n as \n    \n    issue_id\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n, \n    \n    \n    user_id\n    \n as \n    \n    user_id\n    \n\n\n\n\n    from issue_comment\n\n), fields as (\n\n    select \n        id as issue_comment_id,\n        issue_id,\n        user_id,\n        created_at\n\n    from macro\n)\n\nselect *\nfrom fields", "relation_name": "FIVETRAN_DATABASE.GITHUB_github_source.stg_github__issue_comment", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-10-28T15:01:50.489476Z", "completed_at": "2025-10-28T15:01:50.930617Z"}, {"name": "execute", "started_at": "2025-10-28T15:01:50.930910Z", "completed_at": "2025-10-28T15:01:50.930917Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.1606907844543457, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.github.stg_github__pull_request", "compiled": true, "compiled_code": "with pull_request as (\n\n    select *\n    from FIVETRAN_DATABASE.GITHUB_github_source.stg_github__pull_request_tmp\n\n), macro as (\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_github/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_github/macros/).\n\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    base_label\n    \n as \n    \n    base_label\n    \n, \n    \n    \n    base_ref\n    \n as \n    \n    base_ref\n    \n, \n    \n    \n    base_repo_id\n    \n as \n    \n    base_repo_id\n    \n, \n    \n    \n    base_sha\n    \n as \n    \n    base_sha\n    \n, \n    \n    \n    base_user_id\n    \n as \n    \n    base_user_id\n    \n, \n    \n    \n    head_label\n    \n as \n    \n    head_label\n    \n, \n    \n    \n    head_ref\n    \n as \n    \n    head_ref\n    \n, \n    \n    \n    head_repo_id\n    \n as \n    \n    head_repo_id\n    \n, \n    \n    \n    head_sha\n    \n as \n    \n    head_sha\n    \n, \n    \n    \n    head_user_id\n    \n as \n    \n    head_user_id\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    issue_id\n    \n as \n    \n    issue_id\n    \n, \n    \n    \n    merge_commit_sha\n    \n as \n    \n    merge_commit_sha\n    \n\n\n\n\n    from pull_request\n\n), fields as (\n\n    select \n      id as pull_request_id,\n      issue_id,\n      head_repo_id,\n      head_user_id\n\n    from macro\n)\n\nselect *\nfrom fields", "relation_name": "FIVETRAN_DATABASE.GITHUB_github_source.stg_github__pull_request", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-10-28T15:01:51.185065Z", "completed_at": "2025-10-28T15:01:51.278931Z"}, {"name": "execute", "started_at": "2025-10-28T15:01:51.279252Z", "completed_at": "2025-10-28T15:01:51.279258Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.37427401542663574, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.github.stg_github__repository", "compiled": true, "compiled_code": "with repository as (\n\n    select *\n    from FIVETRAN_DATABASE.GITHUB_github_source.stg_github__repository_tmp\n\n), macro as (\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_github/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_github/macros/).\n\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n            \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    archived\n    \n as \n    \n    archived\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    default_branch\n    \n as \n    \n    default_branch\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    fork\n    \n as \n    \n    fork\n    \n, \n    \n    \n    full_name\n    \n as \n    \n    full_name\n    \n, \n    \n    \n    homepage\n    \n as \n    \n    homepage\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    language\n    \n as \n    \n    language\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    owner_id\n    \n as \n    \n    owner_id\n    \n, \n    \n    \n    private\n    \n as \n    \n    private\n    \n\n\n\n\n    from repository\n\n), fields as (\n\n    select \n      id as repository_id,\n      full_name,\n      private as is_private\n\n    from macro\n)\n\nselect *\nfrom fields", "relation_name": "FIVETRAN_DATABASE.GITHUB_github_source.stg_github__repository", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-10-28T15:01:51.468683Z", "completed_at": "2025-10-28T15:01:51.477756Z"}, {"name": "execute", "started_at": "2025-10-28T15:01:51.477997Z", "completed_at": "2025-10-28T15:01:51.478003Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.10200023651123047, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.github.not_null_stg_github__issue_comment_issue_comment_id.11ddd56f0f", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect issue_comment_id\nfrom FIVETRAN_DATABASE.GITHUB_github_source.stg_github__issue_comment\nwhere issue_comment_id is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-10-28T15:01:50.419947Z", "completed_at": "2025-10-28T15:01:51.601088Z"}, {"name": "execute", "started_at": "2025-10-28T15:01:51.601258Z", "completed_at": "2025-10-28T15:01:51.601264Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 1.916377305984497, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.github.stg_github__pull_request_review", "compiled": true, "compiled_code": "with pull_request_review as (\n\n    select *\n    from FIVETRAN_DATABASE.GITHUB_github_source.stg_github__pull_request_review_tmp\n\n), macro as (\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_github/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_github/macros/).\n\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        \n    cast(null as timestamp) as \n    \n    _fivetran_synced\n    \n , \n    cast(null as TEXT) as \n    \n    body\n    \n , \n    cast(null as TEXT) as \n    \n    commit_sha\n    \n , \n    cast(null as integer) as \n    \n    id\n    \n , \n    cast(null as integer) as \n    \n    pull_request_id\n    \n , \n    cast(null as TEXT) as \n    \n    state\n    \n , \n    cast(null as timestamp) as \n    \n    submitted_at\n    \n , \n    cast(null as integer) as \n    \n    user_id\n    \n \n\n\n\n    from pull_request_review\n\n), fields as (\n\n    select \n      id as pull_request_review_id,\n      pull_request_id,\n      cast(submitted_at as timestamp) as submitted_at,\n      state,\n      user_id\n\n    from macro\n)\n\nselect *\nfrom fields", "relation_name": "FIVETRAN_DATABASE.GITHUB_github_source.stg_github__pull_request_review", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-10-28T15:01:51.616713Z", "completed_at": "2025-10-28T15:01:51.624360Z"}, {"name": "execute", "started_at": "2025-10-28T15:01:51.624625Z", "completed_at": "2025-10-28T15:01:51.624630Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.1450662612915039, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.github.unique_stg_github__issue_comment_issue_comment_id.695b2e454a", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    issue_comment_id as unique_field,\n    count(*) as n_records\n\nfrom FIVETRAN_DATABASE.GITHUB_github_source.stg_github__issue_comment\nwhere issue_comment_id is not null\ngroup by issue_comment_id\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-10-28T15:01:49.629778Z", "completed_at": "2025-10-28T15:01:51.662789Z"}, {"name": "execute", "started_at": "2025-10-28T15:01:51.663088Z", "completed_at": "2025-10-28T15:01:51.663093Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 2.9291632175445557, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.github.stg_github__issue", "compiled": true, "compiled_code": "with issue as (\n\n    select *\n    from FIVETRAN_DATABASE.GITHUB_github_source.stg_github__issue_tmp\n\n), macro as (\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_github/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_github/macros/).\n\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n            \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    body\n    \n as \n    \n    body\n    \n, \n    \n    \n    closed_at\n    \n as \n    \n    closed_at\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    locked\n    \n as \n    \n    locked\n    \n, \n    \n    \n    milestone_id\n    \n as \n    \n    milestone_id\n    \n, \n    \n    \n    number\n    \n as \n    \n    number\n    \n, \n    \n    \n    pull_request\n    \n as \n    \n    pull_request\n    \n, \n    \n    \n    repository_id\n    \n as \n    \n    repository_id\n    \n, \n    \n    \n    state\n    \n as \n    \n    state\n    \n, \n    \n    \n    title\n    \n as \n    \n    title\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n, \n    \n    \n    user_id\n    \n as \n    \n    user_id\n    \n\n\n\n\n    from issue \n\n), fields as (\n\n    select \n      id as issue_id,\n      body,\n      cast(closed_at as timestamp) as closed_at,\n      cast(created_at as timestamp) as created_at,\n      locked as is_locked,\n      milestone_id,\n      number as issue_number,\n      pull_request as is_pull_request,\n      repository_id,\n      state,\n      title,\n      cast(updated_at as timestamp) as updated_at,\n      user_id\n      \n    from macro\n)\n\nselect *\nfrom fields", "relation_name": "FIVETRAN_DATABASE.GITHUB_github_source.stg_github__issue", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-10-28T15:01:51.732093Z", "completed_at": "2025-10-28T15:01:51.736240Z"}, {"name": "execute", "started_at": "2025-10-28T15:01:51.736465Z", "completed_at": "2025-10-28T15:01:51.736471Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.1341409683227539, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.github.not_null_stg_github__pull_request_pull_request_id.bc2132ee71", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect pull_request_id\nfrom FIVETRAN_DATABASE.GITHUB_github_source.stg_github__pull_request\nwhere pull_request_id is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-10-28T15:01:51.190531Z", "completed_at": "2025-10-28T15:01:51.846276Z"}, {"name": "execute", "started_at": "2025-10-28T15:01:51.846468Z", "completed_at": "2025-10-28T15:01:51.846473Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.9142389297485352, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.github.stg_github__user", "compiled": true, "compiled_code": "with github_user as (\n\n    select *\n    from FIVETRAN_DATABASE.GITHUB_github_source.stg_github__user_tmp\n\n), macro as (\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_github/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_github/macros/).\n\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n            \n    \n    \n    company\n    \n as \n    \n    company\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    login\n    \n as \n    \n    login\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n\n\n\n        \n        \n    from github_user\n\n), fields as (\n\n    select\n      id as user_id,\n      login as login_name,\n      name,\n      company\n\n    from macro\n)\n\nselect *\nfrom fields", "relation_name": "FIVETRAN_DATABASE.GITHUB_github_source.stg_github__user", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-10-28T15:01:51.989092Z", "completed_at": "2025-10-28T15:01:51.994349Z"}, {"name": "execute", "started_at": "2025-10-28T15:01:51.994650Z", "completed_at": "2025-10-28T15:01:51.994656Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.368333101272583, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.github.unique_stg_github__pull_request_pull_request_id.8f1ca366fa", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    pull_request_id as unique_field,\n    count(*) as n_records\n\nfrom FIVETRAN_DATABASE.GITHUB_github_source.stg_github__pull_request\nwhere pull_request_id is not null\ngroup by pull_request_id\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-10-28T15:01:52.336479Z", "completed_at": "2025-10-28T15:01:52.340044Z"}, {"name": "execute", "started_at": "2025-10-28T15:01:52.340394Z", "completed_at": "2025-10-28T15:01:52.340401Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.6750667095184326, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.github.not_null_stg_github__repository_repository_id.fa3c9c712f", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect repository_id\nfrom FIVETRAN_DATABASE.GITHUB_github_source.stg_github__repository\nwhere repository_id is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-10-28T15:01:52.333630Z", "completed_at": "2025-10-28T15:01:52.343247Z"}, {"name": "execute", "started_at": "2025-10-28T15:01:52.343540Z", "completed_at": "2025-10-28T15:01:52.343545Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.6052520275115967, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.github.unique_stg_github__repository_repository_id.cf6398db3d", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    repository_id as unique_field,\n    count(*) as n_records\n\nfrom FIVETRAN_DATABASE.GITHUB_github_source.stg_github__repository\nwhere repository_id is not null\ngroup by repository_id\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-10-28T15:01:52.351475Z", "completed_at": "2025-10-28T15:01:52.353970Z"}, {"name": "execute", "started_at": "2025-10-28T15:01:52.354142Z", "completed_at": "2025-10-28T15:01:52.354147Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.4870951175689697, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.github.not_null_stg_github__pull_request_review_pull_request_review_id.c646eee790", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect pull_request_review_id\nfrom FIVETRAN_DATABASE.GITHUB_github_source.stg_github__pull_request_review\nwhere pull_request_review_id is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-10-28T15:01:52.420358Z", "completed_at": "2025-10-28T15:01:52.428022Z"}, {"name": "execute", "started_at": "2025-10-28T15:01:52.428520Z", "completed_at": "2025-10-28T15:01:52.428531Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.432542085647583, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.github.unique_stg_github__pull_request_review_pull_request_review_id.1092c62508", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    pull_request_review_id as unique_field,\n    count(*) as n_records\n\nfrom FIVETRAN_DATABASE.GITHUB_github_source.stg_github__pull_request_review\nwhere pull_request_review_id is not null\ngroup by pull_request_review_id\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-10-28T15:01:53.211287Z", "completed_at": "2025-10-28T15:01:53.216108Z"}, {"name": "execute", "started_at": "2025-10-28T15:01:53.216276Z", "completed_at": "2025-10-28T15:01:53.216282Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.7777099609375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.github.unique_stg_github__issue_issue_id.84891aeece", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    issue_id as unique_field,\n    count(*) as n_records\n\nfrom FIVETRAN_DATABASE.GITHUB_github_source.stg_github__issue\nwhere issue_id is not null\ngroup by issue_id\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-10-28T15:01:53.349414Z", "completed_at": "2025-10-28T15:01:53.356866Z"}, {"name": "execute", "started_at": "2025-10-28T15:01:53.357101Z", "completed_at": "2025-10-28T15:01:53.357105Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.9834239482879639, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.github.not_null_stg_github__issue_issue_id.74e7778ca7", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect issue_id\nfrom FIVETRAN_DATABASE.GITHUB_github_source.stg_github__issue\nwhere issue_id is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-10-28T15:01:53.859137Z", "completed_at": "2025-10-28T15:01:53.867224Z"}, {"name": "execute", "started_at": "2025-10-28T15:01:53.867432Z", "completed_at": "2025-10-28T15:01:53.867435Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.6478719711303711, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.github.not_null_stg_github__user_user_id.3ac9bb7b4b", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect user_id\nfrom FIVETRAN_DATABASE.GITHUB_github_source.stg_github__user\nwhere user_id is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-10-28T15:01:53.863236Z", "completed_at": "2025-10-28T15:01:53.868676Z"}, {"name": "execute", "started_at": "2025-10-28T15:01:53.868850Z", "completed_at": "2025-10-28T15:01:53.868853Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.5276150703430176, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.github.unique_stg_github__user_user_id.5c1a00cd90", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    user_id as unique_field,\n    count(*) as n_records\n\nfrom FIVETRAN_DATABASE.GITHUB_github_source.stg_github__user\nwhere user_id is not null\ngroup by user_id\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-10-28T15:01:54.042023Z", "completed_at": "2025-10-28T15:01:54.049947Z"}, {"name": "execute", "started_at": "2025-10-28T15:01:54.050216Z", "completed_at": "2025-10-28T15:01:54.050221Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.1795039176940918, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.github.github__issues", "compiled": true, "compiled_code": "with  __dbt__cte__int_github__issue_open_length as (\nwith issue as (\n    select *\n    from FIVETRAN_DATABASE.GITHUB_github_source.stg_github__issue\n), \n\nissue_closed_history as (\n    select *\n    from FIVETRAN_DATABASE.GITHUB_github_source.stg_github__issue_closed_history\n), \n\nclose_events_stacked as (\n    select   \n      issue_id,\n      created_at as updated_at,\n      false as is_closed\n    from issue -- required because issue_closed_history table does not have a line item for when the issue was opened\n    union all\n    select\n      issue_id,\n      updated_at,\n      is_closed\n    from issue_closed_history\n), \n\nclose_events_with_timestamps as (\n  select\n    issue_id,\n    updated_at as valid_starting,\n    coalesce(lead(updated_at) over (partition by issue_id order by updated_at), convert_timezone('UTC', current_timestamp())) as valid_until,\n    is_closed\n  from close_events_stacked\n)\n\nselect\n  issue_id,\n  sum(datediff(\n        second,\n        valid_starting,\n        valid_until\n        )) /60/60/24 as days_issue_open,\n  count(*) - 1 as number_of_times_reopened\nfrom close_events_with_timestamps\n  where not is_closed\ngroup by issue_id\n),  __dbt__cte__int_github__issue_comments as (\nwith issue_comment as (\n    select *\n    from FIVETRAN_DATABASE.GITHUB_github_source.stg_github__issue_comment\n)\n\nselect\n  issue_id,\n  count(*) as number_of_comments\nfrom issue_comment\ngroup by issue_id\n),  __dbt__cte__int_github__pull_request_times as (\nwith issue as (\n    select *\n    from FIVETRAN_DATABASE.GITHUB_github_source.stg_github__issue\n), \n\nissue_merged as (\n    select\n      issue_id,\n      min(merged_at) as merged_at\n      from FIVETRAN_DATABASE.GITHUB_github_source.stg_github__issue_merged\n    group by 1\n)\n\n\n\nselect \n  issue.issue_id,\n  issue_merged.merged_at\nfrom issue \nleft join issue_merged on issue_merged.issue_id = issue.issue_id\n\n),  __dbt__cte__int_github__pull_request_reviewers as (\nwith pull_request_review as (\n    select *\n    from FIVETRAN_DATABASE.GITHUB_github_source.stg_github__pull_request_review\n), \n\ngithub_user as (\n    select *\n    from FIVETRAN_DATABASE.GITHUB_github_source.stg_github__user\n),\n\nactual_reviewers as (\n  select\n    pull_request_review.pull_request_id,\n    \n    listagg(distinct github_user.login_name, ', ')\n\n as reviewers,\n    count(*) as number_of_reviews\nfrom pull_request_review\nleft join github_user on pull_request_review.user_id = github_user.user_id\ngroup by 1\n),\n\n\n\njoined as (\n  select\n    actual_reviewers.pull_request_id,\n    actual_reviewers.reviewers,\n    cast(null as TEXT) as requested_reviewers,\n    actual_reviewers.number_of_reviews\n  from actual_reviewers\n  )\n\nselect *\nfrom joined\n),  __dbt__cte__int_github__issue_joined as (\nwith issue as (\n    select *\n    from FIVETRAN_DATABASE.GITHUB_github_source.stg_github__issue\n),repository_teams as (\n    select \n    \n      repository_id,\n      full_name as repository\n    from FIVETRAN_DATABASE.GITHUB_github_source.stg_github__repository\n\n    \n),issue_open_length as (\n    select *\n    from __dbt__cte__int_github__issue_open_length\n), \n\nissue_comments as (\n    select *\n    from __dbt__cte__int_github__issue_comments\n), \n\ncreator as (\n    select *\n    from FIVETRAN_DATABASE.GITHUB_github_source.stg_github__user\n), \n\npull_request_times as (\n    select *\n    from __dbt__cte__int_github__pull_request_times\n), \n\npull_request_reviewers as (\n    select *\n    from __dbt__cte__int_github__pull_request_reviewers\n), \n\npull_request as (\n    select *\n    from FIVETRAN_DATABASE.GITHUB_github_source.stg_github__pull_request\n)\n\nselect\n  issue.*,\n  case \n    when issue.is_pull_request then 'https://github.com/' || repository_teams.repository || '/pull/' || issue.issue_number\n    else 'https://github.com/' || repository_teams.repository || '/issues/' || issue.issue_number\n  end as url_link,\n  issue_open_length.days_issue_open,\n  issue_open_length.number_of_times_reopened,\n  cast(null as TEXT) as labels,\n  issue_comments.number_of_comments,\n  repository_teams.repository,cast(null as TEXT) as assignees,\n  creator.login_name as creator_login_name,\n  creator.name as creator_name,\n  creator.company as creator_company,\n\n  pull_request_times.merged_at,\n  pull_request_reviewers.reviewers, \n  \n  pull_request_reviewers.requested_reviewers,\n  pull_request_reviewers.number_of_reviews\n  \nfrom issue\njoin repository_teams\n  on issue.repository_id = repository_teams.repository_id\nleft join issue_open_length\n  on issue.issue_id = issue_open_length.issue_id\nleft join issue_comments \n  on issue.issue_id = issue_comments.issue_id\nleft join creator \n  on issue.user_id = creator.user_id\nleft join pull_request\n  on issue.issue_id = pull_request.issue_id\nleft join pull_request_times\n  on issue.issue_id = pull_request_times.issue_id\nleft join pull_request_reviewers\n  on pull_request.pull_request_id = pull_request_reviewers.pull_request_id\n), issue_joined as (\n    select *\n    from __dbt__cte__int_github__issue_joined  \n)\n\nselect\n  issue_id,\n  body,\n  closed_at,\n  created_at,\n  is_locked,\n  milestone_id,\n  issue_number,\n  is_pull_request,\n  repository_id,\n  state,\n  title,\n  updated_at,\n  user_id,\n  url_link,\n  days_issue_open,\n  number_of_times_reopened,\n  labels,\n  number_of_comments,\n  repository,\n  \n  assignees,\n  creator_login_name,\n  creator_name,\n  creator_company\nfrom issue_joined\nwhere not is_pull_request", "relation_name": "FIVETRAN_DATABASE.GITHUB_github.github__issues", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-10-28T15:01:54.047577Z", "completed_at": "2025-10-28T15:01:54.051771Z"}, {"name": "execute", "started_at": "2025-10-28T15:01:54.051950Z", "completed_at": "2025-10-28T15:01:54.051954Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.1837460994720459, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.github.github__pull_requests", "compiled": true, "compiled_code": "with  __dbt__cte__int_github__issue_open_length as (\nwith issue as (\n    select *\n    from FIVETRAN_DATABASE.GITHUB_github_source.stg_github__issue\n), \n\nissue_closed_history as (\n    select *\n    from FIVETRAN_DATABASE.GITHUB_github_source.stg_github__issue_closed_history\n), \n\nclose_events_stacked as (\n    select   \n      issue_id,\n      created_at as updated_at,\n      false as is_closed\n    from issue -- required because issue_closed_history table does not have a line item for when the issue was opened\n    union all\n    select\n      issue_id,\n      updated_at,\n      is_closed\n    from issue_closed_history\n), \n\nclose_events_with_timestamps as (\n  select\n    issue_id,\n    updated_at as valid_starting,\n    coalesce(lead(updated_at) over (partition by issue_id order by updated_at), convert_timezone('UTC', current_timestamp())) as valid_until,\n    is_closed\n  from close_events_stacked\n)\n\nselect\n  issue_id,\n  sum(datediff(\n        second,\n        valid_starting,\n        valid_until\n        )) /60/60/24 as days_issue_open,\n  count(*) - 1 as number_of_times_reopened\nfrom close_events_with_timestamps\n  where not is_closed\ngroup by issue_id\n),  __dbt__cte__int_github__issue_comments as (\nwith issue_comment as (\n    select *\n    from FIVETRAN_DATABASE.GITHUB_github_source.stg_github__issue_comment\n)\n\nselect\n  issue_id,\n  count(*) as number_of_comments\nfrom issue_comment\ngroup by issue_id\n),  __dbt__cte__int_github__pull_request_times as (\nwith issue as (\n    select *\n    from FIVETRAN_DATABASE.GITHUB_github_source.stg_github__issue\n), \n\nissue_merged as (\n    select\n      issue_id,\n      min(merged_at) as merged_at\n      from FIVETRAN_DATABASE.GITHUB_github_source.stg_github__issue_merged\n    group by 1\n)\n\n\n\nselect \n  issue.issue_id,\n  issue_merged.merged_at\nfrom issue \nleft join issue_merged on issue_merged.issue_id = issue.issue_id\n\n),  __dbt__cte__int_github__pull_request_reviewers as (\nwith pull_request_review as (\n    select *\n    from FIVETRAN_DATABASE.GITHUB_github_source.stg_github__pull_request_review\n), \n\ngithub_user as (\n    select *\n    from FIVETRAN_DATABASE.GITHUB_github_source.stg_github__user\n),\n\nactual_reviewers as (\n  select\n    pull_request_review.pull_request_id,\n    \n    listagg(distinct github_user.login_name, ', ')\n\n as reviewers,\n    count(*) as number_of_reviews\nfrom pull_request_review\nleft join github_user on pull_request_review.user_id = github_user.user_id\ngroup by 1\n),\n\n\n\njoined as (\n  select\n    actual_reviewers.pull_request_id,\n    actual_reviewers.reviewers,\n    cast(null as TEXT) as requested_reviewers,\n    actual_reviewers.number_of_reviews\n  from actual_reviewers\n  )\n\nselect *\nfrom joined\n),  __dbt__cte__int_github__issue_joined as (\nwith issue as (\n    select *\n    from FIVETRAN_DATABASE.GITHUB_github_source.stg_github__issue\n),repository_teams as (\n    select \n    \n      repository_id,\n      full_name as repository\n    from FIVETRAN_DATABASE.GITHUB_github_source.stg_github__repository\n\n    \n),issue_open_length as (\n    select *\n    from __dbt__cte__int_github__issue_open_length\n), \n\nissue_comments as (\n    select *\n    from __dbt__cte__int_github__issue_comments\n), \n\ncreator as (\n    select *\n    from FIVETRAN_DATABASE.GITHUB_github_source.stg_github__user\n), \n\npull_request_times as (\n    select *\n    from __dbt__cte__int_github__pull_request_times\n), \n\npull_request_reviewers as (\n    select *\n    from __dbt__cte__int_github__pull_request_reviewers\n), \n\npull_request as (\n    select *\n    from FIVETRAN_DATABASE.GITHUB_github_source.stg_github__pull_request\n)\n\nselect\n  issue.*,\n  case \n    when issue.is_pull_request then 'https://github.com/' || repository_teams.repository || '/pull/' || issue.issue_number\n    else 'https://github.com/' || repository_teams.repository || '/issues/' || issue.issue_number\n  end as url_link,\n  issue_open_length.days_issue_open,\n  issue_open_length.number_of_times_reopened,\n  cast(null as TEXT) as labels,\n  issue_comments.number_of_comments,\n  repository_teams.repository,cast(null as TEXT) as assignees,\n  creator.login_name as creator_login_name,\n  creator.name as creator_name,\n  creator.company as creator_company,\n\n  pull_request_times.merged_at,\n  pull_request_reviewers.reviewers, \n  \n  pull_request_reviewers.requested_reviewers,\n  pull_request_reviewers.number_of_reviews\n  \nfrom issue\njoin repository_teams\n  on issue.repository_id = repository_teams.repository_id\nleft join issue_open_length\n  on issue.issue_id = issue_open_length.issue_id\nleft join issue_comments \n  on issue.issue_id = issue_comments.issue_id\nleft join creator \n  on issue.user_id = creator.user_id\nleft join pull_request\n  on issue.issue_id = pull_request.issue_id\nleft join pull_request_times\n  on issue.issue_id = pull_request_times.issue_id\nleft join pull_request_reviewers\n  on pull_request.pull_request_id = pull_request_reviewers.pull_request_id\n), issue_joined as (\n    select *\n    from __dbt__cte__int_github__issue_joined  \n)\n\nselect\n  *\nfrom issue_joined\nwhere is_pull_request", "relation_name": "FIVETRAN_DATABASE.GITHUB_github.github__pull_requests", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-10-28T15:01:54.627285Z", "completed_at": "2025-10-28T15:01:54.631607Z"}, {"name": "execute", "started_at": "2025-10-28T15:01:54.631787Z", "completed_at": "2025-10-28T15:01:54.631793Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.5764904022216797, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.github.not_null_github__issues_issue_id.fed0631e25", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect issue_id\nfrom FIVETRAN_DATABASE.GITHUB_github.github__issues\nwhere issue_id is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-10-28T15:01:54.844231Z", "completed_at": "2025-10-28T15:01:54.853499Z"}, {"name": "execute", "started_at": "2025-10-28T15:01:54.853685Z", "completed_at": "2025-10-28T15:01:54.853690Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.8001930713653564, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.github.unique_github__issues_issue_id.6723b9b1db", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    issue_id as unique_field,\n    count(*) as n_records\n\nfrom FIVETRAN_DATABASE.GITHUB_github.github__issues\nwhere issue_id is not null\ngroup by issue_id\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-10-28T15:01:54.850600Z", "completed_at": "2025-10-28T15:01:54.854608Z"}, {"name": "execute", "started_at": "2025-10-28T15:01:54.855411Z", "completed_at": "2025-10-28T15:01:54.855420Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.7992911338806152, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.github.github__daily_metrics", "compiled": true, "compiled_code": "with github_issues as (\n    select *\n    from FIVETRAN_DATABASE.GITHUB_github.github__issues\n), \n\npull_requests as (\n    select *\n    from FIVETRAN_DATABASE.GITHUB_github.github__pull_requests\n), \n\nissues_opened_per_day as (\n    select \n      date_trunc('day', created_at) as day,\n      repository as repository,\n      count(*) as number_issues_opened,\n      sum(days_issue_open) as sum_days_issue_open,\n      max(days_issue_open) as longest_days_issue_open\n    from github_issues\n    group by \n      1,2\n), \n\nissues_closed_per_day as (\n    select \n      date_trunc('day', closed_at) as day,\n      repository as repository,\n      count(*) as number_issues_closed\n    from github_issues\n    where closed_at is not null\n    group by \n      1,2\n), \n\nprs_opened_per_day as (\n    select \n      date_trunc('day', created_at) as day,\n      repository as repository,\n      count(*) as number_prs_opened,\n      sum(days_issue_open) as sum_days_pr_open,\n      max(days_issue_open) as longest_days_pr_open\n    from pull_requests\n    group by \n      1,2\n), \n\nprs_merged_per_day as (\n    select \n      date_trunc('day', merged_at) as day, \n      repository as repository,\n      count(*) as number_prs_merged\n    from pull_requests\n    where merged_at is not null\n    group by\n      1,2\n), \n\nprs_closed_without_merge_per_day as (\n    select \n      date_trunc('day', closed_at) as day,\n      repository as repository,\n      count(*) as number_prs_closed_without_merge\n    from pull_requests\n    where closed_at is not null\n      and merged_at is null\n    group by\n      1,2\n), \n\nissues_per_day as (\n    select \n      coalesce(issues_opened_per_day.day, \n        issues_closed_per_day.day\n      ) as day,\n      coalesce(issues_opened_per_day.repository, \n        issues_closed_per_day.repository\n      ) as repository,\n      number_issues_opened,\n      number_issues_closed,      \n      sum_days_issue_open,\n      longest_days_issue_open\n    from issues_opened_per_day\n    full outer join issues_closed_per_day\n    on \n      issues_opened_per_day.day = issues_closed_per_day.day\n      and issues_opened_per_day.repository = issues_closed_per_day.repository\n), \n\nprs_per_day as (\n    select \n      coalesce(prs_opened_per_day.day, \n        prs_merged_per_day.day,\n        prs_closed_without_merge_per_day.day\n      ) as day,\n      coalesce(prs_opened_per_day.repository, \n        prs_merged_per_day.repository,\n        prs_closed_without_merge_per_day.repository\n      ) as repository,\n      number_prs_opened,\n      number_prs_merged,\n      number_prs_closed_without_merge,\n      sum_days_pr_open,\n      longest_days_pr_open\n    from prs_opened_per_day\n    full outer join prs_merged_per_day \n    on\n      prs_opened_per_day.day = prs_merged_per_day.day\n      and prs_opened_per_day.repository = prs_merged_per_day.repository\n    full outer join prs_closed_without_merge_per_day \n    on\n      coalesce(prs_opened_per_day.day, prs_merged_per_day.day) = prs_closed_without_merge_per_day.day\n      and coalesce(prs_opened_per_day.repository, prs_merged_per_day.repository) = prs_closed_without_merge_per_day.repository\n)\n\nselect \n  coalesce(issues_per_day.day, prs_per_day.day) as day,\n  coalesce(issues_per_day.repository, prs_per_day.repository) as repository,\n  coalesce(number_issues_opened, 0) as number_issues_opened,\n  coalesce(number_issues_closed, 0) as number_issues_closed,\n  sum_days_issue_open,\n  longest_days_issue_open,\n  coalesce(number_prs_opened, 0) as number_prs_opened,\n  coalesce(number_prs_merged, 0) as number_prs_merged,\n  coalesce(number_prs_closed_without_merge, 0) as number_prs_closed_without_merge,\n  sum_days_pr_open,\n  longest_days_pr_open\nfrom issues_per_day \nfull outer join prs_per_day \non\n  issues_per_day.day = prs_per_day.day\n  and issues_per_day.repository = prs_per_day.repository", "relation_name": "FIVETRAN_DATABASE.GITHUB_github.github__daily_metrics", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-10-28T15:01:54.881803Z", "completed_at": "2025-10-28T15:01:54.890651Z"}, {"name": "execute", "started_at": "2025-10-28T15:01:54.890930Z", "completed_at": "2025-10-28T15:01:54.890935Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.8353269100189209, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.github.not_null_github__pull_requests_issue_id.7a49ca5a6f", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect issue_id\nfrom FIVETRAN_DATABASE.GITHUB_github.github__pull_requests\nwhere issue_id is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-10-28T15:01:55.038532Z", "completed_at": "2025-10-28T15:01:55.041977Z"}, {"name": "execute", "started_at": "2025-10-28T15:01:55.042188Z", "completed_at": "2025-10-28T15:01:55.042194Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.40870118141174316, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.github.unique_github__pull_requests_issue_id.ce23997907", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    issue_id as unique_field,\n    count(*) as n_records\n\nfrom FIVETRAN_DATABASE.GITHUB_github.github__pull_requests\nwhere issue_id is not null\ngroup by issue_id\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-10-28T15:01:55.790241Z", "completed_at": "2025-10-28T15:01:55.794242Z"}, {"name": "execute", "started_at": "2025-10-28T15:01:55.795133Z", "completed_at": "2025-10-28T15:01:55.795144Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.9225928783416748, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.github.github__monthly_metrics", "compiled": true, "compiled_code": "with daily_metrics as (\n    select *\n    from FIVETRAN_DATABASE.GITHUB_github.github__daily_metrics\n)\n\nselect \n  date_trunc('month', day) as month, \n  repository as repository,\n  sum(number_issues_opened) as number_issues_opened,\n  sum(number_issues_closed) as number_issues_closed,\n  sum(sum_days_issue_open) / sum(number_issues_opened) as avg_days_issue_open,\n  max(longest_days_issue_open) as longest_days_issue_open,\n  sum(number_prs_opened) as number_prs_opened,\n  sum(number_prs_merged) as number_prs_merged,\n  sum(number_prs_closed_without_merge) as number_prs_closed_without_merge,\n  sum(sum_days_pr_open) / sum(number_prs_opened) as avg_days_pr_open,\n  max(longest_days_pr_open) as longest_days_pr_open\nfrom daily_metrics \ngroup by 1,2", "relation_name": "FIVETRAN_DATABASE.GITHUB_github.github__monthly_metrics", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-10-28T15:01:55.801495Z", "completed_at": "2025-10-28T15:01:55.807494Z"}, {"name": "execute", "started_at": "2025-10-28T15:01:55.808155Z", "completed_at": "2025-10-28T15:01:55.808166Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.9290761947631836, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.github.github__quarterly_metrics", "compiled": true, "compiled_code": "with daily_metrics as (\n    select *\n    from FIVETRAN_DATABASE.GITHUB_github.github__daily_metrics\n)\n\nselect \n  date_trunc('quarter', day) as quarter, \n  repository as repository,\n  sum(number_issues_opened) as number_issues_opened,\n  sum(number_issues_closed) as number_issues_closed,\n  sum(sum_days_issue_open) / sum(number_issues_opened) as avg_days_issue_open,\n  max(longest_days_issue_open) as longest_days_issue_open,\n  sum(number_prs_opened) as number_prs_opened,\n  sum(number_prs_merged) as number_prs_merged,\n  sum(number_prs_closed_without_merge) as number_prs_closed_without_merge,\n  sum(sum_days_pr_open) / sum(number_prs_opened) as avg_days_pr_open,\n  max(longest_days_pr_open) as longest_days_pr_open\n\nfrom daily_metrics \ngroup by 1,2", "relation_name": "FIVETRAN_DATABASE.GITHUB_github.github__quarterly_metrics", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-10-28T15:01:55.824618Z", "completed_at": "2025-10-28T15:01:55.827097Z"}, {"name": "execute", "started_at": "2025-10-28T15:01:55.827266Z", "completed_at": "2025-10-28T15:01:55.827270Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.9317748546600342, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.github.github__weekly_metrics", "compiled": true, "compiled_code": "with daily_metrics as (\n    select *\n    from FIVETRAN_DATABASE.GITHUB_github.github__daily_metrics\n)\n\nselect \n  date_trunc('week', day) as week,\n  repository as repository, \n  sum(number_issues_opened) as number_issues_opened,\n  sum(number_issues_closed) as number_issues_closed,\n  sum(sum_days_issue_open) / sum(number_issues_opened) as avg_days_issue_open,\n  max(longest_days_issue_open) as longest_days_issue_open,\n  sum(number_prs_opened) as number_prs_opened,\n  sum(number_prs_merged) as number_prs_merged,\n  sum(number_prs_closed_without_merge) as number_prs_closed_without_merge,\n  sum(sum_days_pr_open) / sum(number_prs_opened) as avg_days_pr_open,\n  max(longest_days_pr_open) as longest_days_pr_open\nfrom daily_metrics \ngroup by 1,2", "relation_name": "FIVETRAN_DATABASE.GITHUB_github.github__weekly_metrics", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-10-28T15:01:56.061533Z", "completed_at": "2025-10-28T15:01:56.064022Z"}, {"name": "execute", "started_at": "2025-10-28T15:01:56.064186Z", "completed_at": "2025-10-28T15:01:56.064191Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.0053167343139648, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.github.not_null_github__daily_metrics_day.647e494434", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect day\nfrom FIVETRAN_DATABASE.GITHUB_github.github__daily_metrics\nwhere day is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-10-28T15:01:56.896471Z", "completed_at": "2025-10-28T15:01:56.906095Z"}, {"name": "execute", "started_at": "2025-10-28T15:01:56.906309Z", "completed_at": "2025-10-28T15:01:56.906315Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.09598708152771, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.github.not_null_github__monthly_metrics_month.9e4fba84df", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect month\nfrom FIVETRAN_DATABASE.GITHUB_github.github__monthly_metrics\nwhere month is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-10-28T15:01:56.978943Z", "completed_at": "2025-10-28T15:01:56.984223Z"}, {"name": "execute", "started_at": "2025-10-28T15:01:56.984859Z", "completed_at": "2025-10-28T15:01:56.984866Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 1.1870231628417969, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.github.not_null_github__daily_metrics_repository.b67aa085ef", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect repository\nfrom FIVETRAN_DATABASE.GITHUB_github.github__daily_metrics\nwhere repository is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-10-28T15:01:57.005290Z", "completed_at": "2025-10-28T15:01:57.041328Z"}, {"name": "execute", "started_at": "2025-10-28T15:01:57.041609Z", "completed_at": "2025-10-28T15:01:57.041614Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 1.174915075302124, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.github.not_null_github__monthly_metrics_repository.94a57ace26", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect repository\nfrom FIVETRAN_DATABASE.GITHUB_github.github__monthly_metrics\nwhere repository is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-10-28T15:01:57.094538Z", "completed_at": "2025-10-28T15:01:57.097310Z"}, {"name": "execute", "started_at": "2025-10-28T15:01:57.097482Z", "completed_at": "2025-10-28T15:01:57.097487Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.0321438312530518, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.github.not_null_github__quarterly_metrics_quarter.92394d46dc", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect quarter\nfrom FIVETRAN_DATABASE.GITHUB_github.github__quarterly_metrics\nwhere quarter is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-10-28T15:01:57.725336Z", "completed_at": "2025-10-28T15:01:57.731952Z"}, {"name": "execute", "started_at": "2025-10-28T15:01:57.732169Z", "completed_at": "2025-10-28T15:01:57.732174Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.8216309547424316, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.github.not_null_github__quarterly_metrics_repository.d99ef517b0", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect repository\nfrom FIVETRAN_DATABASE.GITHUB_github.github__quarterly_metrics\nwhere repository is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-10-28T15:01:57.816014Z", "completed_at": "2025-10-28T15:01:57.834029Z"}, {"name": "execute", "started_at": "2025-10-28T15:01:57.834290Z", "completed_at": "2025-10-28T15:01:57.834296Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.8438341617584229, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.github.not_null_github__weekly_metrics_repository.02cec60246", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect repository\nfrom FIVETRAN_DATABASE.GITHUB_github.github__weekly_metrics\nwhere repository is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-10-28T15:01:57.839856Z", "completed_at": "2025-10-28T15:01:57.842780Z"}, {"name": "execute", "started_at": "2025-10-28T15:01:57.843986Z", "completed_at": "2025-10-28T15:01:57.843991Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.7869830131530762, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.github.not_null_github__weekly_metrics_week.4b0b928243", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect week\nfrom FIVETRAN_DATABASE.GITHUB_github.github__weekly_metrics\nwhere week is null\n\n\n", "relation_name": null, "batch_results": null}], "elapsed_time": 12.883169889450073, "args": {"warn_error_options": {"error": [], "warn": [], "silence": []}, "require_nested_cumulative_type_params": false, "favor_state": false, "require_explicit_package_overrides_for_builtin_materializations": true, "version_check": true, "require_all_warnings_handled_by_warn_error": false, "output": "text", "log_path": "github_fivetran/logs", "strict_mode": false, "select": [], "show_all_deprecations": false, "exclude": [], "inject_ephemeral_ctes": true, "require_batched_execution_for_custom_microbatch_strategy": false, "print": true, "log_level": "none", "send_anonymous_usage_stats": true, "state_modified_compare_more_unrendered_values": false, "require_resource_names_without_spaces": true, "log_file_max_bytes": 10485760, "log_level_file": "info", "which": "compile", "quiet": false, "defer": false, "macro_debugging": false, "require_generic_test_arguments_property": true, "partial_parse": true, "profiles_dir": "/var/folders/hr/glbd1lxn0c55shpdyzhn4x540000gn/T/tmpo9sq3edg", "empty": false, "log_format": "default", "static_parser": true, "upload_to_artifacts_ingest_api": false, "state_modified_compare_vars": false, "partial_parse_file_diff": true, "cache_selected_only": false, "vars": {}, "log_format_file": "debug", "project_dir": "github_fivetran", "indirect_selection": "eager", "use_colors_file": true, "validate_macro_args": false, "write_json": true, "target_path": "target", "show_resource_report": false, "use_fast_test_edges": false, "use_colors": true, "require_yaml_configuration_for_mf_time_spines": false, "printer_width": 80, "introspect": true, "skip_nodes_if_on_run_start_fails": false, "invocation_command": "dbt ", "populate_cache": true, "source_freshness_run_project_hooks": true}}